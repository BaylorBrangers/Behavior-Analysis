#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Dec  6 13:04:55 2018

@author: baylor
"""


import numpy as np
import csv
import matplotlib.pyplot as plt
import re
from bisect import bisect_left
from scipy import signal

from scipy import stats
#
#import 2mt_fns_classes as 2mt
import pandas as pd

from sklearn.manifold import *
from sklearn import *

from sklearn.neighbors import *
from scipy import stats

import matplotlib.animation as animation
import time

###Make sure pointing to the correct directory!!
#
#f_2MT=['sub1_2MT_tracking.csv','sub2_2MT_tracking.csv','sub3_2MT_tracking.csv','sub4_2MT_tracking.csv',
#       'sub5_2MT_tracking.csv','sub6_2MT_tracking.csv','sub7_2MT_tracking.csv','sub8_2MT_tracking.csv']
#f_2MT_Washout=['sub1_2MT_tracking.csv','sub2_2MT_tracking.csv','sub3_2MT_tracking.csv','sub4_2MT_tracking.csv',
#       'sub5_2MT_tracking.csv','sub6_2MT_tracking.csv','sub7_2MT_tracking.csv','sub8_2MT_tracking.csv']
#f_hab2=['sub1_2MT_tracking.csv','sub2_2MT_tracking.csv','sub3_2MT_tracking.csv','sub4_2MT_tracking.csv',
#       'sub5_2MT_tracking.csv','sub6_2MT_tracking.csv','sub7_2MT_tracking.csv','sub8_2MT_tracking.csv']



####################################################################3
#Bonsai scores videos at 30 fps, heads up!!!!!!!
#
#
#
###################################################################3


file='/home/baylor/Desktop/Binary_Tracking_Info/sub7_2MT_tracking.csv'


def read_binary_file(file_name):
    """ generate acclerometer data vector. Only looking at the
    first three components of the sensor"""

    with open (file_name, 'r') as f:
        reader = csv.reader(f, delimiter=' ')
        next(reader, None)

        #data from bonsai file
        x_data = []
        y_data = []
        area = []
        major_axis=[]
        # contains data from y axis from largest binary region
        #file was generated by 2mt bonsai program
        

        for line in reader:
            
            
            #for test files

            x_data.append(line[0])
            y_data.append(line[1])
            major_axis.append(line[3])
            area.append(line[5])
        x_data = np.array([float(i) for i in x_data])
        y_data = np.array([float(i) for i in y_data])
        major_axis = np.array([float(i) for i in major_axis])
        area = np.array([float(i) for i in area])
        return (x_data , y_data,major_axis, area)
      
x,y,major_axis,area= read_binary_file(file)
###################################################
def down_sample(new_x,time_span):
  new_x=np.array(new_x)
  data_length=np.int(np.size(new_x))
  new_array=np.zeros(np.int(data_length/time_span))
  i=0
  stop=np.int(data_length/time_span)
  fuck=np.zeros(np.size(new_x))
  
  
  for i in range(np.int(np.size(new_x))):
    fuck[i]=np.float(new_x[i])
    
  for i in range(stop):
    new_array[i]=np.mean(fuck[i*time_span:(i+1)*time_span])
    if math.isnan(new_array[i]):
      new_array[i]=new_array[i-1]
  return new_array

x_ds=down_sample(x,30)
y_ds=down_sample(y,30)
area_dz=down_sample(area,30)

###################################################
def abs_value(x,y):
  
  return np.sqrt(np.square(np.float(x))+np.square(np.float(y)))
####################################################
def total_distance_traveled(x,y,start_time,stop_time):

  i=start_time
  total_distance=0
  stop=stop_time
  velocity=np.zeros(np.int(stop_time-start_time))
  p=0
  while i < stop:
    if i == stop_time-1:
      break
    else:
      future_spot=abs_value(np.float(x[i+1])-np.float(x[i]),np.float(y[i+1])-np.float(y[i]))
      velocity[p]=future_spot
      total_distance=total_distance+future_spot
    i=i+1
    p=p+1
  print(i)   
  return total_distance,velocity
#######################################################  
def time_immobile(area_array,x,y,major_axis):
  fuck=np.zeros(np.size(area_array))
  for i in range(np.int(np.size(area_array))):
    fuck[i]=np.float(area_array[i])
  for i in range(int(fuck.shape[0])):
    if major_axis>(abs_value(np.float(x[i+1])-np.float(x[i]),np.float(y[i+1])-np.float(y[i]))):
      fuck[i]=1
      
  return fuck



#for .5 sec
#distance_taveled_pre_stim,velocity_ps=total_distance_traveled(x_ds,y_ds,0,600)
#distance_taveled_during_stim,velocity_s=total_distance_traveled(x_ds,y_ds,600,1200)

#for 1 sec
distance_taveled_pre_stim,velocity_ps=total_distance_traveled(x_ds,y_ds,0,300)
distance_taveled_during_stim,velocity_s=total_distance_traveled(x_ds,y_ds,300,600)


#
#data_dict={}
#for f,file_name in enumerate(f_2MT):
#   name=str(file_name[7:])
#   key=str(file_name[7:])
#   name=2mt.binary_identificatoin_profile()
#   name.read_binary_data(file_name)
#   name.total_distance(file_name)
#   data_dict[key] = name
#   
